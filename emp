import java.util.List;
import model.Emprestimo;

public interface EmprestimoDAO {
    void salvarEmprestimo(Emprestimo emprestimo);
    void atualizarEmprestimo(Emprestimo emprestimo);
    void excluirEmprestimo(int id);
    Emprestimo buscarEmprestimoPorId(int id);
    List<Emprestimo> listarTodosEmprestimos();
}

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import model.Emprestimo;

/**
 * Implementação da interface EmprestimoDAO para operações de CRUD em empréstimos utilizando MySQL.
 */
public class EmprestimoDAOImpl implements EmprestimoDAO {
    private Connection conn;

    /**
     * Construtor da classe EmprestimoDAOImpl.
     * Estabelece a conexão com o banco de dados MySQL.
     */
    public EmprestimoDAOImpl() {
        try {
            // Carregar o driver JDBC do MySQL
            Class.forName("com.mysql.cj.jdbc.Driver");
            // Estabelecer a conexão com o banco de dados MySQL
            this.conn = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/seu_banco_de_dados", 
                "seu_usuario", 
                "sua_senha"
            );
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Salva um novo empréstimo no banco de dados.
     *
     * @param emprestimo o objeto Emprestimo a ser salvo.
     */
    @Override
    public void salvarEmprestimo(Emprestimo emprestimo) {
        String sql = "INSERT INTO emprestimos (ferramenta_id, amigo_id, data_emprestimo, data_devolucao) VALUES (?, ?, ?, ?)";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, emprestimo.getFerramentaId());
            stmt.setInt(2, emprestimo.getAmigoId());
            stmt.setDate(3, Date.valueOf(emprestimo.getDataEmprestimo()));
            stmt.setDate(4, Date.valueOf(emprestimo.getDataDevolucao()));
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Atualiza um empréstimo existente no banco de dados.
     *
     * @param emprestimo o objeto Emprestimo a ser atualizado.
     */
    @Override
    public void atualizarEmprestimo(Emprestimo emprestimo) {
        String sql = "UPDATE emprestimos SET ferramenta_id = ?, amigo_id = ?, data_emprestimo = ?, data_devolucao = ? WHERE id = ?";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, emprestimo.getFerramentaId());
            stmt.setInt(2, emprestimo.getAmigoId());
            stmt.setDate(3, Date.valueOf(emprestimo.getDataEmprestimo()));
            stmt.setDate(4, Date.valueOf(emprestimo.getDataDevolucao()));
            stmt.setInt(5, emprestimo.getId());
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Exclui um empréstimo do banco de dados.
     *
     * @param id o ID do empréstimo a ser excluído.
     */
    @Override
    public void excluirEmprestimo(int id) {
        String sql = "DELETE FROM emprestimos WHERE id = ?";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, id);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Busca um empréstimo por ID.
     *
     * @param id o ID do empréstimo a ser buscado.
     * @return o objeto Emprestimo encontrado, ou null se não encontrado.
     */
    @Override
    public Emprestimo buscarEmprestimoPorId(int id) {
        String sql = "SELECT * FROM emprestimos WHERE id = ?";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, id);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return new Emprestimo(
                    rs.getInt("id"),
                    rs.getInt("ferramenta_id"),
                    rs.getInt("amigo_id"),
                    rs.getDate("data_emprestimo").toLocalDate(),
                    rs.getDate("data_devolucao").toLocalDate()
                );
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * Lista todos os empréstimos no banco de dados.
     *
     * @return uma lista de todos os objetos Emprestimo.
     */
    @Override
    public List<Emprestimo> listarTodosEmprestimos() {
        List<Emprestimo> emprestimos = new ArrayList<>();
        String sql = "SELECT * FROM emprestimos";
        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                emprestimos.add(new Emprestimo(
                    rs.getInt("id"),
                    rs.getInt("ferramenta_id"),
                    rs.getInt("amigo_id"),
                    rs.getDate("data_emprestimo").toLocalDate(),
                    rs.getDate("data_devolucao").toLocalDate()
                ));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return emprestimos;
    }
}
